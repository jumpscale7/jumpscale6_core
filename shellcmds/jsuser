#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jsuser")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['add','delete','list'], help='Command to perform')
parser.add_argument("-p",'--passwd', help='superadmin passwd for grid')
parser.add_argument("-d",'--data', help='add user as username:passwd:group1,group2:email1,email2:domain')
parser.add_argument("-a",'--addr', help='ip addr of master, if not specified will be the one as specified in local config')

#parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
#parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')

import JumpScale.grid.osis

opts = parser.parse_args()

if opts.passwd==None:
    if j.application.config.exists("gridmaster.superadminpasswd"):
        opts.passwd=j.application.config.get("gridmaster.superadminpasswd")
    else:
        opts.passwd=j.console.askString("please provide superadmin passwd for the grid.")

if opts.addr==None:    
    addr=j.application.config.get("grid.master.ip")
else:
    addr=opts.addr
print opts.passwd
osis=j.core.osis.getClient(addr,5544,"root",opts.passwd)
userclient=j.core.osis.getClientForCategory(osis,"system","user")
groupclient=j.core.osis.getClientForCategory(osis,"system","group")

############ADD
if opts.action =='add':
    if opts.data<>None:
        splitted=opts.data.split(":")
        if len(splitted)<>5:
            raise RuntimeError("error, format for param data needs to be: username:passwd:group1,group2:email1,email2:domain")
        name,passwd,groups,emails,domain=splitted
        groups=groups.split(",")
        emails=emails.split(",")
    else:
        name=j.console.askString("name")
        passwd=j.console.askString("passwd")
        gid=j.console.askInteger("gid",defaultValue=j.application.whoAmI.gid)
        domain=j.console.askString("domain e.g. incubaid.com")
        
        if j.console.askYesNo("do you want to define new groups.")=="y":
            groups=j.console.askString("comma separated list of groups").split(",")
        else:
            groups=[item["id"] for item in groupclient.simpleSearch({"gid":gid})]
            groups=j.console.askChoiceMultiple(groups,"select groups",True)        

        emails=j.console.askString("comma separated list of emails")

    if userclient.exists(name):
        raise RuntimeError("user already exists")

    user=userclient.new()
    user.id=name
    user.groups=groups
    user.emails=emails
    user.domain=domain
    user.passwd=j.tools.hash.md5_string(passwd)

    guid,a,b=userclient.set(user)

    user=userclient.get(guid)

    print user


#@todo implement delete & list

j.application.stop()
