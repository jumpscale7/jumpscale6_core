#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jsuser")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['add','delete','list','auth'], help='Command to perform')

parser.add_argument("-d",'--data', help='add user as username:passwd:group1,group2:email1,email2:domain')

parser.add_argument("-ul",'--userlogin', help='username to do check,edit')
parser.add_argument("-up",'--userpasswd', help='passwd for user to check,edit')
parser.add_argument("-ud",'--domain', help='domain for user to list')

#parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
#parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')

opts=cmdutils.processLogin(parser)

import JumpScale.grid.osis

osis=j.core.osis.getClient(opts.addr,5544,"root",opts.passwd)
userclient=j.core.osis.getClientForCategory(osis,"system","user")
groupclient=j.core.osis.getClientForCategory(osis,"system","group")

############ADD
if opts.action =='auth':
    if opts.userlogin==None:
        opts.userlogin=j.console.askString("user to check")
    if opts.userpasswd==None:
        opts.userpasswd=j.console.askString("passwd for user to check")

    result=userclient.authenticate(name=opts.userlogin,passwd=opts.userpasswd)
    for key,val in result.iteritems():
        print "%-20s %s"%(key,val)


if opts.action =='add':
    if opts.data<>None:
        splitted=opts.data.split(":")
        if len(splitted)<>5:
            raise RuntimeError("error, format for param data needs to be: username:passwd:group1,group2:email1,email2:domain")
        name,passwd,groups,emails,domain=splitted
        groups=groups.split(",")
        emails=emails.split(",")
    else:
        name=j.console.askString("name")
        passwd=j.console.askString("passwd")
        gid=j.console.askInteger("gid",defaultValue=j.application.whoAmI.gid)
        domain=j.console.askString("domain e.g. incubaid.com")
        
        if j.console.askYesNo("do you want to define new groups."):
            groups=j.console.askString("comma separated list of groups").split(",")
        else:
            groups=[item["id"] for item in groupclient.simpleSearch({"gid":gid})]
            groups=j.console.askChoiceMultiple(groups,"select groups",True)        

        emails=j.console.askString("comma separated list of emails")

    if userclient.exists(name):
        raise RuntimeError("user already exists")

    user=userclient.new()
    user.id=name
    user.groups=groups
    user.emails=emails
    user.domain=domain
    user.passwd=j.tools.hash.md5_string(passwd)

    guid,a,b=userclient.set(user)

    user=userclient.get(guid)

    print user

if opts.action =='list':
    out=""
    print "\n%-20s %-25s %s"%("name","domain","groups")
    print "="*80,
    for item in userclient.simpleSearch({"domain":opts.domain}):
        out+="%-20s %-25s %s\n"%(item["id"],item["domain"],",".join(item["groups"]))
    out=out.split("\n")
    out.sort()
    out="\n".join(out)
    print out
    print
            

#@todo implement delete & list

j.application.stop()
