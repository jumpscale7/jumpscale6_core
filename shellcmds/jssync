#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jssync")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['jsboxupload','jsboxuploadall','jpackagesupload','libsupload','cfgupload','baseupload','installerupload',\
    'jsboxdownload','jsboxdownloadall','jpackagesdownload','libsdownload','basedownload','cfgdownload',\
    'system2sandbox','libs2sandbox','jpackages2sandbox','cfg2sandbox','base2sandbox'], help='Command to perform')

parser.add_argument("-b", '--branch', help='branch of jumpscale', default="unstable")
parser.add_argument("-q",'--qualitylevel', help='qualitylevel of jpackages e.g. unstable,test,stable', default="")
parser.add_argument("-k", '--key', help='secret key (can have ql inside or anything)', default="")
parser.add_argument("-s", '--sbpath', help='sandbox path', default="/opt/jsbox")
parser.add_argument("-j", '--jpdomains', help='specify add domains to look for when syncing/uploading jpackages.', default="")

opts = parser.parse_args()

ipaddr=j.application.config.get("jssync.addr")

def getkey():
    if opts.key=="" :
        raise RuntimeError("specify key")
    return opts.key

def sync(src,dest,delete=True):
    print "SYNC: %s %s"%(src,dest)
    if delete:
        d="--delete-after "
    else:
        d="--max-delete=0 "
    cmd="rsync -Lrpo %s%s %s"%(d,src,dest)

    if not j.system.fs.exists(path="%s"%(src)):
        print "ERROR:could not find dir:%s"%(src)
        j.application.stop(1)

    j.system.process.executeWithoutPipe(cmd)

def download(category,path="",data=False):
    print "DOWNLOAD: %s %s"%(category,path)
    key=getkey()
    category=category.strip("/")
    path=path.strip("/")
    path="/%s/"%path

    if data:
        base="%s_data"%(opts.sbpath)
        category="%s_data"%(category)
    else:
        base=opts.sbpath

    pathfs="%s%s"%(base,path)

    cmd="rsync -azv %s::download/%s/%s%s %s  --delete-after --modify-window=60 --compress"%(ipaddr,\
        key,category,path,pathfs)
    print cmd
    j.system.process.executeWithoutPipe(cmd)    

def createdir(path):
    # 
    
    order=[]
    order.insert(0,path)
    while path[-7:]<>":upload":
        path=j.system.fs.getParent(path)
        order.insert(0,path)

    j.system.fs.createDir("/tmp/empty")
    # j.system.fs.writeFile(filename="/tmp/empty/_empty",contents=".")

    order.pop(0)
    for item in order:
        if item[-1]<>"/":
            item+="/"
        cmd="rsync /tmp/empty/ %s"%item
        j.system.process.execute(cmd)
    
def upload(category,path="",data=False):
    print "UPLOAD: %s %s"%(category,path)
    key=getkey()

    category=category.strip("/")
    path=path.strip("/")
    path="/%s/"%path

    if data:
        base="%s_data"%(opts.sbpath)
        category="%s_data"%(category)
    else:
        base=opts.sbpath

    pathfs="%s%s"%(base,path)

    if not data:
        j.system.fs.removeIrrelevantFiles(pathfs)

    cmd="rsync -azvPh %s %s::upload/%s/%s%s --delete-after --modify-window=60 --compress --progress  "%(pathfs,\
        ipaddr,key,category,path)
    for i in range(100):
        try:
            print cmd
            j.system.process.execute(cmd)    
            return
        except Exception,e:
            if str(e).find("No such file or directory")<>-1:
                createdir("%s::upload/%s/%s%s"%(ipaddr,key,category,path))            
            print "error in sync:%s"%e
            print "RETRY"

def finddomain(name):
    for cat in j.system.fs.listDirsInDir("/opt/code/", recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
        for dname in j.system.fs.listDirsInDir("/opt/code/%s"%cat, recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
            if dname.find("__jp_")<>-1:
                dname2=dname.split("__jp_",1)[1]
                if dname2.lower().strip()==name.lower().strip():
                    return "/opt/code/%s/%s"%(cat,dname)
    raise RuntimeError("could not find domain for name:'%s'"%name)

#COPY FROM SYSTEM TO SANDBOX JPACKAGES
if opts.action =='system2sandbox' or opts.action =='jpackages2sandbox':
    if opts.qualitylevel=="":
        raise RuntimeError("quality level needs to be specified")

    j.system.fs.removeDirTree("%s/jpackages/"%opts.sbpath)
    j.system.fs.createDir("%s/jpackages/"%opts.sbpath)

    doms=opts.jpdomains.split(",")
    for item in ["jumpscale","serverapps","desktop"]:
        if item<>None or item.strip()<>"":
            if item not in doms:
                doms.append(item)

    for dom in doms:
        if dom.strip()<>"":
            path=finddomain(dom)
            # print "JPACKAGEDOM:%s"%path
            sync("%s/%s/"%(path,opts.qualitylevel),"%s/jpackages/%s/"%(opts.sbpath,dom))

            dpath=j.system.fs.joinPaths("/opt","jsbox","jpackages",dom)
            for path in j.system.fs.listFilesInDir(dpath,True,"main.hrd"):
                hrd=j.core.hrd.getHRD(path)
                hrd.set("jp.debug",0)
                
#COPY FROM SYSTEM TO SANDBOX for LIBS
if opts.action =='system2sandbox' or opts.action =='libs2sandbox':
    if opts.branch=="":
        raise RuntimeError("branch name needs to be specified")

    j.system.fs.removeDirTree("%s/apps/"%opts.sbpath)
    j.system.fs.createDir("%s/apps/"%opts.sbpath)    

    j.system.fs.removeDirTree("%s/libjs/JumpScale/"%opts.sbpath)
    j.system.fs.createDir("%s/libjs/JumpScale/"%opts.sbpath)    

    for item in ["base","baselib","core"]:
        sync("/opt/code/jumpscale/%s__jumpscale_core/lib/JumpScale/%s/"%(opts.branch,item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))
    item="grid"
    sync("/opt/code/jumpscale/%s__jumpscale_grid/lib/JumpScale/%s/"%(opts.branch,item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))
    item="lib"
    sync("/opt/code/jumpscale/%s__jumpscale_lib/JumpScale/%s/"%(opts.branch,item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))

    #grid apps
    sync("/opt/code/jumpscale/%s__jumpscale_grid/apps/agent/"%opts.branch,"%s/apps/agent/"%opts.sbpath)
    sync("/opt/code/jumpscale/%s__jumpscale_core/apps/blobserver/"%opts.branch,"%s/apps/blobserver/"%opts.sbpath)
    sync("/opt/code/jumpscale/%s__jumpscale_grid/apps/processmanager/"%opts.branch,"%s/apps/processmanager/"%opts.sbpath)

    #tools
    sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/tools/"%opts.branch,"%s/tools/"%opts.sbpath)
    #sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/cfg/"%opts.branch,"/opt/jsbox/cfg/")
    sync("/opt/code/jumpscale/%s__jumpscale_core/shellcmds/"%opts.branch,"%s/tools/"%opts.sbpath,delete=False)
    sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/libjs/"%opts.branch,"%s/libjs/"%opts.sbpath,delete=False)


#COPY FROM SYSTEM TO SANDBOX for LIBS
if opts.action =='system2sandbox' or opts.action =='cfg2sandbox':
    if opts.branch=="":
        raise RuntimeError("branch name needs to be specified")

    cfgdir="%s_data/cfg/"%opts.sbpath
    j.system.fs.removeDirTree(cfgdir)
    j.system.fs.createDir(cfgdir)

    sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/cfg/"%opts.branch,cfgdir,delete=False)

if opts.action =='base2sandbox':
    cmd='jpackage download -n base'
    j.system.process.executeWithoutPipe(cmd)
    src="$vardir/jpackages/files/jumpscale/base/2.7/linux64/base/"
    src=j.dirs.replaceTxtDirVars(src)
    dest="%s/"%opts.sbpath
    sync(src,dest,delete=False)

#UPLOAD JPACKAGES
if opts.action.find('jsboxupload')==0 or opts.action =='jpackagesupload':        
    upload("jsbox","jpackages")

if opts.action =='jsboxuploadall'or opts.action =='cfgupload':
    upload("jsbox","cfg",data=True)

if opts.action=='installerupload':
    path="/opt/code/jumpscale/%s__jumpscale_core/jsbox/installers/"%opts.branch    
    cmd="rsync -azvPh %s %s::www/cmds/ --modify-window=60 --compress --progress  "%(path,ipaddr)
    print cmd
    j.system.process.executeWithoutPipe(cmd)   

if opts.action.find('jsboxupload')==0 or opts.action =='libsupload':
    upload("jsbox","libjs")
    upload("jsbox","libext")
    upload("jsbox","apps/agent")
    upload("jsbox","apps/blobserver")
    upload("jsbox","apps/processmanager")

if opts.action.find('jsboxupload')==0 or opts.action =='baseupload':    
    upload("jsbox","lib")
    upload("jsbox","bin")


#################################
#DOWNLOAD

if opts.action.find('jsboxdownload')==0 or opts.action =='basedownload':
    download("jsbox","lib")
    download("jsbox","bin")

if opts.action.find('jsboxdownload')==0 or opts.action =='jpackagesdownload':
    download("jsbox","jpackages")    

if opts.action.find('jsboxdownload')==0 or opts.action =='libsdownload':
    download("jsbox","libjs")
    download("jsbox","libext")
    download("jsbox","apps/agent")
    download("jsbox","apps/blobserver")
    download("jsbox","apps/processmanager")

if opts.action =='jsboxdownloadall' or opts.action =='cfgdownload': 
    download("jsbox","cfg",data=True) 


j.application.stop()
