#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jssync")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['jsboxupload','jsboxdownload','jsboxupdate','system2sandbox',\
    'jpackagesupload','jpackagesdownload','jsboxuploadcfg'], help='Command to perform')

parser.add_argument("-q", '--qualitylevel', help='qualitylevel e.g. unstable,test,stable', default="")
parser.add_argument("-k", '--key', help='secret key which will be prepended to quality level if ql exists', default="")
parser.add_argument("-s", '--sbpath', help='sandbox path', default="/opt/jsbox")


opts = parser.parse_args()

ipaddr=j.application.config.get("jssync.addr")

def getkey():
    if opts.qualitylevel=="" and opts.key=="":
        raise RuntimeError("specify qualitylevel name or key")        
    if opts.qualitylevel<>"" and opts.key<>"":
        key="%s_%s"%(opts.key,opts.qualitylevel)
    else:
        key="%s%s"%(opts.key,opts.qualitylevel)
    return key

def sync(src,dest,delete=True):
    print "SYNC: %s %s"%(src,dest)
    if delete:
        d="--delete-after "
    else:
        d="--max-delete=0 "
    cmd="rsync -Lrpo %s%s %s"%(d,src,dest)
    j.system.process.executeWithoutPipe(cmd)

def download(category,path="",data=False):
    print "DOWNLOAD: %s %s"%(category,path)
    key=getkey()
    if path=="" or path[0]<>"/":
        path="/%s"%path
    if path[-1]<>"/":
        path="%s/"%path
    if data:
        path+="_data"
    cmd="rsync -azv %s::download/%s/%s%s %s%s  --delete-after --modify-window=60 --compress"%(ipaddr,\
        key,category,path,opts.sbpath,path)
    print cmd
    j.system.process.executeWithoutPipe(cmd)    

def upload(category,path="",data=False):
    print "UPLOAD: %s %s"%(category,path)
    key=getkey()
    if path=="" or path[0]<>"/":
        path="/%s"%path    
    if path[-1]<>"/":
        path="%s/"%path  
    if data:
        path+="_data"
    cmd="rsync -azv %s%s %s::upload/%s/%s%s  --delete-after --modify-window=60 --compress"%(opts.sbpath,\
        path,ipaddr,key,category,path)
    print cmd
    j.system.process.executeWithoutPipe(cmd)    

#COPY FROM SYSTEM TO SANDBOX JPACKAGES
if opts.action =='system2sandbox' or opts.action =='jsboxupload' or opts.action =='jpackagesupload':
    if opts.qualitylevel=="":
        raise RuntimeError("quality level needs to be specified")
    sync("/opt/code/jumpscale/default__jp_jumpscale/%s/"%opts.qualitylevel,"%s/jpackages/jumpscale/"%opts.sbpath)
    sync("/opt/code/jumpscale/default__jp_serverapps/%s/"%opts.qualitylevel,"%s/jpackages/serverapps/"%opts.sbpath)
    sync("/opt/code/jumpscale/default__jp_desktop/%s/"%opts.qualitylevel,"/%s/jpackages/jsdesktop/"%opts.sbpath)

    for dname in ["jsdesktop","jumpscale","serverapps"]:
        dpath=j.system.fs.joinPaths("/opt","jsbox","jpackages",dname)
        for path in j.system.fs.listFilesInDir(dpath,True,"main.hrd"):
            hrd=j.core.hrd.getHRD(path)
            hrd.set("jp.debug",0)

#COPY FROM SYSTEM TO SANDBOX for LIBS
if opts.action =='system2sandbox' or opts.action =='jsboxupload':
    if opts.qualitylevel=="":
        raise RuntimeError("quality level needs to be specified")
    for name in ["base","baselib","core","lib","grid","portal"]:
        sync("/usr/local/lib/python2.7/site-packages/JumpScale/%s/"%name,"%s/libjs/JumpScale/%s/"%(opts.sbpath,name))
    sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/tools/"%opts.qualitylevel,"%s/tools/"%opts.sbpath)
    #sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/cfg/"%opts.qualitylevel,"/opt/jsbox/cfg/")
    sync("/opt/code/jumpscale/%s__jumpscale_core/shellcmds/"%opts.qualitylevel,"%s/tools/"%opts.sbpath,delete=False)

#UPLOAD JPACKAGES
if opts.action =='jpackagesupload':        
    upload("jsbox","jpackages")

#UPLOAD ALL
if opts.action =='jsboxuploadall':
    upload("jsbox")

if opts.action =='jsboxupload':
    raise RuntimeError("to implement")
    #upload jpackages & libs


if opts.action =='jsboxuploadcfg':
    upload("jsbox",data=True)

if opts.action =='jpackagesdownload':
    download("jsbox","jpackages")    

if opts.action =='jsboxdownloadall':  
    download("jsbox")
    download("jsbox",data=True)

if opts.action =='jsboxupdate':
    download("jsbox")

j.application.stop()
