#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jssync")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['jsboxupload','jsboxdownload','system2sandbox','jpackagesupload','jpackagesdownload'], help='Command to perform')

parser.add_argument("-q", '--qualitylevel', help='qualitylevel e.g. unstable')
parser.add_argument("-s", '--system2sandbox', help='will copy jumpscale & jpackage files from system before uploading',action='store_true', default=False)

# parser.add_argument("-i", '--iface', help='ifacename e.g. eth0')
# parser.add_argument("-a", '--ipaddr', help='ipaddr like 192.168.1.3/24')
# parser.add_argument("-g", '--gw', help='gateway like 192.168.1.1')

# parser.add_argument("-e", '--ifaceexcl', help='ifacename to not use in applyconfig (to not lock you out)')
# parser.add_argument("-n", '--networkids', help='range of networkids e.g 20-100')


# parser.add_argument("-d", '--desktop', action='store_true', help='opendesktop')
# parser.add_argument('--passwd', help='password for desktop')

# parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
# parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')


opts = parser.parse_args()
    

if opts.action =='system2sandbox' or opts.action =='jsboxupload':
    if opts.action =='system2sandbox' or opts.system2sandbox:
        cmd="rsync -Lrv /opt/code/jumpscale/default__jp_jumpscale/unstable/ /opt/jsbox/jpackages/jp_jumpscale/"
        j.system.process.executeWithoutPipe(cmd)
        cmd="rsync -Lrv /opt/code/jumpscale/default__jp_serverapps/unstable/ /opt/jsbox/jpackages/jp_serverapps/"
        j.system.process.executeWithoutPipe(cmd)
        cmd="rsync -Lrv /opt/code/jumpscale/default__jp_desktop/unstable/ /opt/jsbox/jpackages/jp_desktop/"
        j.system.process.executeWithoutPipe(cmd)
        cmd="rsync -Lrv /usr/local/lib/python2.7/site-packages/JumpScale/ /opt/jsbox/libjs/JumpScale/"
        j.system.process.executeWithoutPipe(cmd)

if opts.action =='jpackagesupload' or opts.action =='jsboxupload':        
    if opts.qualitylevel==None:
        raise RuntimeError("specify qualitylevel name")   
    ipaddr=j.application.config.get("jssync.addr")        
    for name in ["jp_desktop","jp_serverapps","jp_jumpscale"]:
        cmd="rsync -av -v /opt/jsbox/jpackages/%s/ %s::upload/jsbox/%s/jpackages/%s/ --delete-after --modify-window=60 --compress --stats  --progress"%(name,ipaddr,opts.qualitylevel,name)
        print cmd
        j.system.process.executeWithoutPipe(cmd)

if opts.action =='jpackagesdownload':        
    if opts.qualitylevel==None:
        raise RuntimeError("specify qualitylevel name")   
    ipaddr=j.application.config.get("jssync.addr")
    cmd="rsync -av -v %s::upload/jsbox/%s/jpackages/ /opt/jsbox/jpackages/  --delete-after --modify-window=60 --compress --stats  --progress"%(ipaddr,opts.qualitylevel)
    print cmd
    j.system.process.executeWithoutPipe(cmd)


if opts.action =='jsboxupload':        
    if opts.qualitylevel==None:
        raise RuntimeError("specify qualitylevel name")     
    ipaddr=j.application.config.get("jssync.addr")
    for name in ["bin","lib","tools","libjs"]:#,"cfg","apps"]:
        cmd="rsync -av -v /opt/jsbox/%s/ %s::upload/jsbox/%s/%s/ --delete-after --modify-window=60 --compress --stats  --progress"%(name,ipaddr,opts.qualitylevel,name)
        print cmd
        j.system.process.executeWithoutPipe(cmd)

if opts.action =='jsboxdownload':
    if opts.qualitylevel==None:
        raise RuntimeError("specify qualitylevel name")     
    ipaddr=j.application.config.get("jssync.addr")
    for name in ["bin","lib","tools","libjs"]:#,"cfg","apps"]:
        cmd="rsync -av -v %s::upload/jsbox/%s/%s/ /opt/jsbox/%s/  --delete-after --modify-window=60 --compress --stats  --progress"%(ipaddr,opts.qualitylevel,name,name)
        print cmd
        # j.system.process.executeWithoutPipe(cmd)



j.application.stop()
