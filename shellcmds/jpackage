#!/usr/bin/env python
from JumpScale.baselib import cmdutils
import JumpScale.baselib.jpackages
from JumpScale import j
import sys
j.application.start('jpackage')

parser = cmdutils.ArgumentParser()

commands = ['create', 'configure', 'debug', 'download', 'export', 'install', 'link', 'monitor', 'package',
            'publish', 'repackage', 'restart', 'start', 'stop', 'mdupdate', 'updateall', 'upload', 'mirror',
            'switchbranch', 'list']

parser.add_argument("action", choices=commands, help='Command to perform')

group = parser.add_argument_group(title="Package Selection")
group.add_argument('-q','--quiet', required=False, action='store_true', help='Put in quiet mode')
group.add_argument('-n','--name',required=False, help='Name of jpackage to be installed')
group.add_argument('-d','--domain',required=False, help='Name of jpackage domain to be installed')
group.add_argument('-v','--version',required=False, help='Version of jpackage to be installed')
group.add_argument('--deps', required=False, action='store_true', help='do on dependencies e.g. install, update, ...')
group.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question')

#install
group = parser.add_argument_group(title="Install/Update")
group.add_argument('-r', '--reinstall', required=False, action='store_true', help='Reinstall found package')
group.add_argument('-s', '--single', required=False, action='store_true', help='Do not install dependencies')
group.add_argument('--debug', required=False, action='store_true', help='Sets debug_mode for package')
group.add_argument('--nodownload', required=False, action='store_true', help='skips download')

#debug
group = parser.add_argument_group(title="Debug")
engroup = group.add_mutually_exclusive_group()
engroup.add_argument('--enable', dest='debug', default=True, action='store_true')
engroup.add_argument('--disable', dest='debug', default=True, action='store_false')
group.add_argument('--list', action='store_true')

#download
group = parser.add_argument_group(title="Download")
group.add_argument('--nocode', required=False, action='store_true', help='do not download the files which were build using the coderecipe')
group.add_argument('--noexpand', required=False, action='store_true', help='do not expand locally')

#publish
group = parser.add_argument_group(title="Repackage / Publish")
group.add_argument('-m', '--message', required=False, help='Commit message to publish package')
group.add_argument('-l', '--local', dest="local", default=False, action="store_true", required=False, help='Only repackage locally')
group.add_argument('-p', '--publish', dest="publish", default=False, action="store_true", required=False, help='Publish metadata')
group.add_argument('--merge', dest="merge", default=False, action="store_true", required=False, help='Merge existing content of jpackage files with recipe if ommited clean existing content.')

#upload
group = parser.add_argument_group(title="Upload")
group.add_argument('--onlycode', required=False, action='store_true', help='to only upload jpackage files which are for coderecipes')

#switchbranch
group = parser.add_argument_group(title="Switch Branch")
group.add_argument('--branch', help='Branch of the coderecipe')

args = parser.parse_args()

original_stdout = sys.stdout

if args.quiet:
    class NullDevice():
        def write(self, s):
            pass
    sys.stdout = NullDevice();

if (args.deps) and args.action in ["create","debug","mdupdate","mirror","list"]:
    raise RuntimeError("deps or nodeps option is not used for %s."%args.action)

if args.action == 'create':

    j.packages.create()

elif args.action == 'debug':
    if args.list:
        for item in j.packages.getDebugPackages():
            print item
        j.application.stop()

    if not args.debug:
        #to disable debug
        choicearray=[]
        for item in j.packages.getDebugPackages():
            # choicearray.append([str(item),item])
            choicearray.append(item)

        for item in j.console.askChoiceMultiple(choicearray,"select packages to disable debug"):
            item.removeDebugMode()
    else:
        print "SELECT which packages to enable debug for. First select domain, then select jpackages."
        packages = cmdutils.getJPackage(args,installed=False,debug=False)
        for package in packages:
            package.setDebugMode(dependencies=args.deps)

elif args.action == 'download':
    packages = cmdutils.getJPackage(args)
    for package in packages:
        package.download(dependencies=args.deps,nocode=args.nocode,expand=not(args.noexpand))

elif args.action == 'export':
    packages = cmdutils.getJPackage(args, installed=True)
    for package in packages:
        package.codeExport(dependencies=args.deps)

elif args.action == 'configure':
    packages = cmdutils.getJPackage(args,installed=True)
    for package in packages:
        package.configure(dependencies=args.deps)

elif args.action == 'install' or args.action == 'update':
    packages = cmdutils.getJPackage(args)
    for package in packages:
        dependencies = True
        if args.single or args.deps:#args.deps because the cmdutils.getJPackage(...) will already have found the dependencies
            dependencies=False
        if args.debug:
            package.setDebugMode()
        download=True
        if args.nodownload:
            download=False
        package.install(dependencies=dependencies, reinstall=args.reinstall,download=download)
    # j.tools.startupmanager.startAll()
    

elif args.action == 'link':
    packages = cmdutils.getJPackage(args,installed=True)
    for package in packages:
        package.codeLink(dependencies=args.deps)

elif args.action == 'monitor':
    packages = cmdutils.getJPackage(args,installed=True)
    result=[]
    for package in packages:
        if package.monitor(dependencies=args.deps)==True:
            result.append("OK    :%s"%package)
        else:
            result.append("ERROR :%s"%package)

    print "\n\nMONITORING RESULTS:"
    print "\n".join(result)

elif args.action == 'package':
    packages = cmdutils.getJPackage(args)
    for package in packages:
        package.package(dependencies=args.deps)

elif args.action == 'publish':
    packages = cmdutils.getJPackage(args,installed=False)

    domains=[]
    for p in packages:
        if p.domain not in domains:
            domains.append(p.domain)
    for domain in domains:
        j.packages.publish(args.message,domain)

elif args.action == 'repackage':
    packages = cmdutils.getJPackage(args)
    domains = { jp.domain for jp in packages }
    for domain in domains:
        j.packages.updateMetaData(domain)

    for package in packages:
        if not args.merge:
            j.system.fs.removeDirTree(package.getPathFiles())
        package.package(update=True)
        if not args.message:
            args.message = 'Building JPackage "%s"' % package.name
        package.upload(remote=not args.local)
        if args.publish:
            j.packages.publish(args.message, package.domain)

elif args.action == 'restart':
    packages= cmdutils.getJPackage(args,installed=True)
    for package in packages:
        package.restart(dependencies=args.deps)

elif args.action == 'start':
    packages= cmdutils.getJPackage(args,installed=True)
    for package in packages:
        package.start(dependencies=args.deps)

elif args.action == 'stop':
    packages= cmdutils.getJPackage(args,installed=True)
    for package in packages:
        package.stop(dependencies=args.deps)

elif args.action == 'mdupdate':
    j.packages.updateMetaData(force=args.force)

elif args.action == 'upload':
    packages = cmdutils.getJPackage(args,installed=False)
    for package in packages:
        package.upload(dependencies=args.deps,onlycode=args.onlycode)

elif args.action == 'mirror':
    packages=j.packages.find(domain="*",name="*")
    for package in packages:
        package.download(allplatforms=True)

elif args.action == 'switchbranch':
    packages = cmdutils.getJPackage(args,installed=False)
    for package in packages:
        recipe = package.getCodeMgmtRecipe()
        if args.branch==None:
            args.branch=j.console.askString("new branchname")
        print "switch branch for %s to %s"%(package,args.branch)
        recipe.hrd.set('jp.code.branch', args.branch)

elif args.action == 'list':
    # packages = cmdutils.getJPackage(args,installed=True)
    if args.domain<>False:
        domains=[args.domain]
    else:
        domains=j.console.askChoiceMultiple(j.packages.getDomainNames(),"chose jpackages to list for")
    for domain in domains:
        packages=j.packages.find(domain=domain,name="*")
        form = '%(domain)-15s %(name)-20s %(version)8s %(buildnr)8s %(debug)5s'
        print form % {'domain': 'DOMAIN', 'name': 'NAME', 'version': 'VERSION', 'debug': 'DEBUG', 'buildnr':'BUILDNR'}
        print '=' * 60
        print ''
        for package in packages:
            debug = 'yes' if package.debug else 'no'
            print form % {'name': package.name, 'domain': package.domain, 'version': package.version, 'debug': debug, 'buildnr': package.buildNr}

sys.stdout = original_stdout
j.application.stop()
