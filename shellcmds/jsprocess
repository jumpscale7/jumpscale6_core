#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils

j.application.start("jsprocess")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['logs', 'attach', 'list', 'status', 'start', 'stop', 'restart', 'disable', 'enable'], help='Command to perform')
parser.add_argument("-n", '--name', help='Process name')
parser.add_argument("-d", '--domain', help='Process domain')

FORMAT = "%-20s %-20s %-10s %-8s %-10s"

opts = parser.parse_args()
if opts.action in ('list', 'status'):
    print FORMAT % ('DOMAIN', 'NAME', 'PRIORITY', 'STATUS', 'AUTOSTART')
    print '-'* 71
    print

pds = j.tools.startupmanager.getProcessDefs(opts.domain, opts.name)

# single process commands
if opts.action in ('attach', 'logs'):
    if len(pds) != 1:
        print 'Could not find exactly one running process %s %s' % (opts.domain, opts.name)
        j.application.stop(1)
    elif opts.action == 'attach':
        j.system.platform.screen.attachSession(pds[0].domain, pds[0].name)
    elif opts.action == 'logs':
        pds[0].showLogs()
    j.application.stop(0)

if opts.action == 'disable':
    #make sure is stopped first
    j.tools.startupmanager.stopProcess(opts.domain, opts.name)

if opts.action == 'restart':
    j.tools.startupmanager.restartProcess(opts.domain, opts.name)
    j.application.stop(0)

# commands applying on list of processes
if opts.action == 'stop':
    pds_rev = sorted(pds, key=lambda x: x.priority, reverse=True)
    for pd in pds_rev:
        pd.stop()
    j.application.stop(0)

for pd in pds:
    if opts.action in ('list', 'status'):
        
        status = ''
        active = 'enabled' if pd.autostart else 'disabled'
        if opts.action == 'status':
            status = 'RUNNING' if pd.isRunning() else 'HALTED'
        else:
            status = 'RUNNING' if pd.isRunning(quicktest=True) else 'HALTED'

        print FORMAT % (pd.domain, pd.name, pd.priority, status, active)
    else:
        getattr(pd, opts.action)()

j.application.stop()
