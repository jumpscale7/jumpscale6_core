#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

try:
    import ujson as json
except:
    import json

import sys,time

j.application.start("jsgrid")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['reinit', 'reconfigure', 'testall', 'reinitsentry', 'healthcheck', 'purgelogs', 'purgejobs', 'purgeecos', 'deletenode',\
        'restartprocessmgrs','reloadjumpscripts','restartWorkers', 'listnodes', 'enablenode', 'disablenode', 'setrole', 'deleterole'], help='Command to perform')
# parser.add_argument("-n", '--nr', help='desktop nr')
# parser.add_argument("-d", '--desktop', action='store_true', help='opendesktop')
# parser.add_argument('--passwd', help='password for desktop')

parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')
parser.add_argument('--from', dest='ffrom', required=False, type=str, help='used with purgelogs, ex: --from=-2h, --from=-2d (note the = sign)')
parser.add_argument('--to', required=False, type=str, help='used with purgelogs, ex: --to=-1h, --to=-1d (note the = sign)')
parser.add_argument('-nid', '--nodeid', dest='nid', required=False, type=str, help='used with deletenode, ex: -nid=1(note the = sign)')
parser.add_argument('-roles', dest='roles', required=False, type=str, help='Used with setroles or deleterole. ex: -roles=node, computenode.kvm(note the = sign). List is comma seperated')


#check redis is there if not try to start
if not j.system.net.tcpPortConnectionTest("127.0.0.1",7768):
    j.packages.findNewest(name="redis").install()
    j.packages.findNewest(name="redis").start()


opts = parser.parse_args()

if opts.action =='reinit' or opts.action =='reinitsentry':
    j.packages.findNewest(name="sentry").stop()
    sentrytemplate = "/opt/sentry/data/sentry_template.db"
    if j.system.fs.exists(sentrytemplate):
        j.system.fs.copyFile(sentrytemplate,"/opt/sentry/data/sentry.db")
        j.packages.findNewest(name="sentry").start()


############RECONFIGURE
if opts.action =='reconfigure':
    packages=["grid_master","grid_node","osis","logger","agentcontroller","agent"]
    for package in packages:
        jp=j.packages.findNewest(name=package)
        jp.configure()

    packages=["osis","logger","agentcontroller","agent"]
    for package in packages:
        jp=j.packages.findNewest(name=package)        
        jp.restart()

    j.tools.startupmanager.startAll()

############PS
if opts.action =='reinit':

    jp=j.packages.findNewest(name="osis")
    jp.start()
    
    if opts.force<>None:
        j.system.process.executeWithoutPipe("osis deleteall")
    else:
        j.system.process.executeWithoutPipe("osis deleteall --force=1")



    j.packages.findNewest(name="graphite").stop()

    for item in ["%s/graphite/storage/whisper/"%j.dirs.baseDir,"%s/var/log/"%j.dirs.baseDir,"%s/var/tmp/"%j.dirs.baseDir]:
        j.system.fs.removeDirTree(item)
        j.system.fs.createDir(item)
    
    j.packages.findNewest(name="graphite").start()

    packages=["grid_master","grid_node","osis","agentcontroller","workers"]
    for package in packages:
        jp=j.packages.findNewest(name=package)
        if not jp.isInstalled():
            jp.install()
        elif jp.isInstalled():
            print "RECONFIGURE:%s"%jp
            jp.configure()


    jp=j.packages.findNewest(name="grid_portal")
    jp.restart()

# packages=["osis","logger"]
#     for package in packages:
#         jp=j.packages.findNewest(name=package)        
#         jp.restart()

    j.tools.startupmanager.startAll()

    j.system.process.executeWithoutPipe("jsuser add -d admin:admin:admin::")

    print "has set user admin with passwd admin, please change using command 'jsuser' if required."

#################HEALTHCHECK
if opts.action == 'healthcheck':
    import JumpScale.grid.gridhealthchecker
    j.core.grid.healthchecker.runAll()

if opts.action == 'restartprocessmgrs':
    import JumpScale.grid.agentcontroller
    ac=j.clients.agentcontroller.get()
    ac.restartProcessmanagerWorkers()

if opts.action == 'reloadjumpscripts':
    import JumpScale.grid.agentcontroller
    ac=j.clients.agentcontroller.get()
    ac.reloadjumpscripts()

if opts.action == 'restartWorkers':
    import JumpScale.grid.agentcontroller
    ac=j.clients.agentcontroller.get()
    ac.restartWorkers()


#################PURGELOGS
if opts.action in ['purgelogs','purgejobs', 'purgeecos']:
    import JumpScale.baselib.elasticsearch
    def _getEpoch(time):
        if not time:
            return time
        if isinstance(time, int):
            return time
        if time.startswith('-'):
            return j.base.time.getEpochAgo(time)
        return j.base.time.getEpochFuture(time)

    esclient = j.clients.elasticsearch.get()
    query = dict()

    if opts.action in ['purgelogs', 'purgeecos']:
        timeElement='epoch'
    elif opts.action in ['purgejobs']:
        timeElement='timeStart'
    
    if opts.ffrom:
        query['range'] = dict()
        query['range'][timeElement] = dict()
        query['range'][timeElement]['gt'] = int(_getEpoch(opts.ffrom))
    
    if opts.to==None:
        opts.to="-4h"

    if opts.to:
        if 'range' not in query:
            query['range'] = dict()
            query['range'][timeElement] = dict()
        query['range'][timeElement]['lt'] = int(_getEpoch(opts.to))

    queryfull={"query":query}

    if query:
        if opts.action in ['purgelogs']:
            index='system_log'
        elif opts.action in ['purgejobs']:
            index='system_job'
        elif opts.action in ['purgeecos']:
            index='system_eco'

        beforecount = esclient.count(index=index, query=query, doc_type='json')['count']
        result = esclient.delete_by_query(index=index, query=query, doc_type='json')
        aftercount = esclient.count(index=index, query=query, doc_type='json')['count']

        if result['_indices'][index]['_shards']['successful'] == result['_indices'][index]['_shards']['total'] and result['ok']:
            print 'purge %s executed successfully. %s records deleted.' % (index, beforecount-aftercount)


#################NODE ACTIONS####################################
def _deleteNode(node):
    nid = node['id']
    if not node:
        print "Node %s does not exist." % nid
    else:
        nodeguid = node[0]['guid']
        ncl.delete(nodeguid)
        print 'Node %s with guid %s deleted successfully' % (nid, nodeguid)

        print "Deleting relevant data... this may take a while"
        categories = oscl.listNamespaceCategories('system')

        for category in categories:
            print "Deleting %s..." % category
            catclient = j.core.osis.getClientForCategory(oscl, 'system', category)
            if category == 'stats':
                catclient.delete(nid)
                break
            if category == 'log':
                catclient.delete_by_query(query={"term":{"id":nid}})
                break
            total, results = catclient.simpleSearch({'nid':nid}, size=0, withguid=True, withtotal=True)
            results = catclient.simpleSearch({'nid':nid}, size=total, withguid=True)
            for result in results:
                guid = result['guid']
                catclient.delete(guid)

if opts.action in ['deletenode', 'enablenode', 'disablenode', 'setrole', 'listnodes', 'deleterole']:
    import JumpScale.grid.osis

    oscl = j.core.osis.getClient(user='root')
    ncl = j.core.osis.getClientForCategory(oscl, 'system', 'node')


    if opts.action == 'listnodes':
        form = '%(nid)-8s %(name)-11s %(ips)-60s %(active)-8s %(roles)-25s'
        print form % {'nid': 'NODE ID', 'name': 'NAME', 'ips': 'IP ADDRESS', 'active': 'ACTIVE', \
            'roles':'ROLES'}
        print '=' * 100
        print ''
        ns={}
        for node in ncl.simpleSearch({}, size=0):

            name=node['name'].strip()
            if len(name)>10:
                name=name[:11]
            ips=', '.join(node['ipaddr'])
            if len(ips)>60:
                ips=ips[:51]            
            ns[name]={'nid': node['id'], 'name': name, 'ips': ips, 'active': node['active'], 'roles': ', '.join(node['roles'])}

        nsnames=ns.keys()
        nsnames.sort()
        for nsn in nsnames:
            print form % ns[nsn]
    else:
        if not opts.nid:
            nodes = dict()
            for node in ncl.simpleSearch({}, size=0):
                nodes[node['name']] = node
            choicearray = nodes.keys()
            for item in j.console.askChoiceMultiple(choicearray,"Select node"):
                node = nodes[item]
                if opts.action == 'deletenode':
                    _deleteNode(item)
                elif opts.action == 'enablenode':
                    node['active'] = True
                    ncl.set(node)
                elif opts.action == 'disablenode':
                    node['active'] = False
                    ncl.set(node)
                elif opts.action == 'setrole':
                    r = node['roles']
                    if opts.roles:
                        for role in opts.roles.split(","):
                            if role.lower().strip() not in r:
                                r.append(role)
                    else:
                        roles = str(j.console.askString("Enter node roles (Seperated by ',')", defaultparam=','.join(node['roles'])))
                        for role in roles.split(","):
                            if role.lower().strip() not in r:
                                r.append(role)
                    r.sort()
                    node['roles'] = r
                    ncl.set(node)
                elif opts.action == 'deleterole':
                    r = node['roles']
                    if opts.roles:
                        for role in opts.roles.split(","):
                            if role.lower().strip() in r:
                                r.remove(role)
                    else:
                        roles = j.console.askChoiceMultiple(r, "Choose which roles to remove")
                        for role in roles:
                            if role.lower().strip() in r:
                                r.remove(role)
                    r.sort()
                    node['roles'] = r
                    ncl.set(node)
        else:
            node = ncl.simpleSearch({'id':opts.nid}, withguid=True)
            _deleteNode(node)




j.application.stop()
