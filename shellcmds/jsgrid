#!/usr/bin/env python
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jsgrid")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['reinit', 'reconfigure', 'testall', 'reinitsentry', 'healthcheck', 'purgelogs'], help='Command to perform')
# parser.add_argument("-n", '--nr', help='desktop nr')
# parser.add_argument("-d", '--desktop', action='store_true', help='opendesktop')
# parser.add_argument('--passwd', help='password for desktop')

parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')
parser.add_argument('--from', dest='ffrom', required=False, type=str, help='used with purgelogs, ex: --from=-2h, --from=-2d (note the = sign)')
parser.add_argument('--to', required=False, type=str, help='used with purgelogs, ex: --to=-1h, --to=-1d (note the = sign)')


#check redis is there if not try to start
if not j.system.net.tcpPortConnectionTest("127.0.0.1",7768):
    j.packages.findNewest(name="redis").install()
    j.packages.findNewest(name="redis").start()


opts = parser.parse_args()

if opts.action =='reinit' or opts.action =='reinitsentry':
    j.packages.findNewest(name="sentry").stop()
    sentrytemplate = "/opt/sentry/data/sentry_template.db"
    if j.system.fs.exists(sentrytemplate):
        j.system.fs.copyFile(sentrytemplate,"/opt/sentry/data/sentry.db")
        j.packages.findNewest(name="sentry").start()


############RECONFIGURE
if opts.action =='reconfigure':
    packages=["grid_master","grid_node","osis","logger","agentcontroller","agent"]
    for package in packages:
        jp=j.packages.findNewest(name=package)
        jp.configure()

    packages=["osis","logger","agentcontroller","agent"]
    for package in packages:
        jp=j.packages.findNewest(name=package)        
        jp.restart()

    j.tools.startupmanager.startAll()

############PS
if opts.action =='reinit':

    jp=j.packages.findNewest(name="osis")
    jp.start()
    
    if opts.force<>None:
        j.system.process.executeWithoutPipe("osis deleteall")
    else:
        j.system.process.executeWithoutPipe("osis deleteall --force=1")



    j.packages.findNewest(name="graphite").stop()

    for item in ["/opt/graphite/storage/whisper/","/opt/jumpscale/var/log/","/opt/jumpscale/var/tmp/"]:
        j.system.fs.removeDirTree(item)
        j.system.fs.createDir(item)
    
    j.packages.findNewest(name="graphite").start()

    packages=["grid_master","grid_node","osis","agentcontroller","workers"]
    for package in packages:
        jp=j.packages.findNewest(name=package)
        if not jp.isInstalled():
            jp.install()
        elif jp.isInstalled():
            print "RECONFIGURE:%s"%jp
            jp.configure()



    jp=j.packages.findNewest(name="grid_portal")
    jp.restart()

# packages=["osis","logger"]
#     for package in packages:
#         jp=j.packages.findNewest(name=package)        
#         jp.restart()

    j.tools.startupmanager.startAll()

    j.system.process.executeWithoutPipe("jsuser add -d admin:admin:admin::")

    print "has set user admin with passwd admin, please change using command 'jsuser' if required."

#################HEALTHCHECK
if opts.action == 'healthcheck':
    import JumpScale.grid.gridhealthchecker
    j.core.grid.healthchecker.runAll()
    # import JumpScale.grid.osis
    # osiscl = j.core.osis.getClient(user='root')
    # nodecl = j.core.osis.getClientForCategory(osiscl, 'system', 'node')

    # print '#############################'
    # print 'ElasticSearch status:'
    # esstatus,errors = j.core.grid.healthchecker.checkElasticSearch()
    # print "result"
    # for key, val in esstatus.iteritems():
    #     if isinstance(val, dict):
    #         for k, v in val.iteritems():
    #             print '%s: %s' % (k, v)
    #     else:
    #         print '%s: %s' % (key, val)


    # nodeids = list()
    # nodes = nodecl.list()
    # for node in nodes:
    #     nobj = nodecl.get(node)
    #     nodeid = nobj.id
    #     nodeids.append(nobj.id)

    # print '#############################'
    # print 'Process Managers Status:'
    # for nodeid in nodeids:
    #     status = j.core.grid.healthchecker.checkProcessManagers(nodeid)
    #     print 'Node %s:' % nodeid
    #     print '----------'
    #     print 'Process manager is %s' % ('RUNNING' if status else 'HALTED')

    # print '#############################'
    # print 'Redis Status:'
    # for nodeid in nodeids:
    #     rstatus = j.core.grid.healthchecker.checkRedis(nodeid)
    #     print 'Node %s:' % nodeid
    #     print '----------'
    #     for port, stat in rstatus.iteritems():
    #         statstr = 'RUNNING, Memory used: %s' % stat['memory_usage'] if stat['alive'] else 'HALTED'
    #         print 'Port %s: %s' % (port, statstr)

    # print '#############################'
    # print 'Workers Status:'
    # for nodeid in nodeids:
    #     workers = j.core.grid.healthchecker.checkWorkers(nodeid)
    #     print 'Node %s:' % nodeid
    #     print '----------'
    #     for worker, stat in workers.iteritems():
    #         print "'%s': CPU percent: %s %%, Memory used: %.2f MB, Running: %s, Last Active: %s" % (worker, stat['cpu'], stat['mem']/1024.0/1024.0, stat['status'], j.base.time.epoch2HRDateTime(stat['lastactive']))

    # print '#############################'
    # print 'Disks Status:'
    # for nodeid in nodeids:
    #     workers = j.core.grid.healthchecker.checkDisks(nodeid)
    #     print 'Node %s:' % nodeid
    #     print '----------'
    #     for disk, msg in workers.iteritems():
    #         print "%s : %s" % (disk, msg)

    # print '#############################'

#################PURGELOGS
if opts.action == 'purgelogs':
    import JumpScale.baselib.elasticsearch
    def _getEpoch(time):
        if not time:
            return time
        if isinstance(time, int):
            return time
        if time.startswith('-'):
            return j.base.time.getEpochAgo(time)
        return j.base.time.getEpochFuture(time)

    esclient = j.clients.elasticsearch.get()
    query = dict()
    if opts.ffrom:
        query['range'] = dict()
        query['range']['epoch'] = dict()
        query['range']['epoch']['from'] = _getEpoch(opts.ffrom)

    if opts.to:
        if 'range' not in query:
            query['range'] = dict()
            query['range']['epoch'] = dict()
        query['range']['epoch']['to'] = _getEpoch(opts.to)
    if query:
        result = esclient.delete_by_query(index='system_log', query=query, doc_type='json')
        if result['_indices']['system_log']['_shards']['successful'] == result['_indices']['system_log']['_shards']['total'] and result['ok']:
            print 'purgelogs executed successfullly'


j.application.stop()
