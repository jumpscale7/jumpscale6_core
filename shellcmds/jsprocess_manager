#!/usr/bin/env python
from JumpScale import j

import JumpScale.grid.geventws
import gevent
from gevent.event import Event
# import JumpScale.baselib.statmanager
import JumpScale.baselib.graphite
import psutil

import JumpScale.baselib.stataggregator

j.application.start("jsprocess_manager")

j.logger.consoleloglevel = 5

class MgrCmds():

    def __init__(self, daemon):
        self.daemon = daemon
        self.manager=j.tools.startupmanager        
        self.monitorProcess()
        self.lastMonitorResult=None
        self.lastMonitorTime=None
        self.aggregator=j.system.stataggregator

    def authenticate(self, user, login, **args):
        return True  # will authenticall all (is std)

    # def reset(self, **args):
    #     return self.manager.reset()

    def getDomains(self,**args):
        return self.manager.getDomains()

    def startJPackage(self,jpackage,timeout=20,**args):
        return self.manager.startJPackage(jpackage,timeout)

    def stopJPackage(self,jpackage,timeout=20,**args):        
        return self.manager.stopJPackage(jpackage,timeout)

    def existsJPackage(self,jpackage,**args):
        return self.manager.existsJPackage(jpackage)

    def startAll(self,**args):
        return self.manager.startAll()

    def removeProcess(self,domain, name,**args):
        return self.manager.removeProcess(domain, name)

    def getStatus4JPackage(self,jpackage,**args):
        return self.manager.getStatus4JPackage(jpackage)

    def getStatus(self, domain, name,**args):
        """
        get status of process, True if status ok
        """
        return self.manager.getStatus( domain, name)

    def listProcesses(self,**args):
        return self.manager.listProcesses()

    def startProcess(self, domain="", name="", timeout=20,**args):
        return self.manager.startProcess( domain, name, timeout)

    def stopProcess(self, domain,name, timeout=20,**args):
        return self.manager.stopProcess(domain,name, timeout)

    def disableProcess(self, domain,name, timeout=20,**args):
        return self.manager.disableProcess( domain,name, timeout)

    def enableProcess(self, domain,name, timeout=20,**args):
        return self.manager.enableProcess( domain,name, timeout)

    def monitorProcess(self, domain="",name="",**args):
        # if not j.system.net.tcpPortConnectionTest("localhost",2003):
        #     return

        # monitorinfo=""
        # for pd in self.manager.getProcessDefs(domain,name):
        #     result= pd.getStatInfo(format="txt")
        #     monitorinfo+="%s\n"%result
        # print monitorinfo

        # j.clients.graphite.send(monitorinfo)
        
        result={}
        nr=0
        for val in psutil.cpu_percent(0,True):
            nr+=1
            j.system.stataggregator.set("cpu.percent.%s"%nr,round(val*100,0))

        nr=0
        for cput in psutil.cpu_times(True):
            nr+=1
            for key in cput.__dict__.keys():
                val=cput.__dict__[key]
                j.system.stataggregator.set("cpu.time.%s.%s"%(key,nr),val)

        # out=""
        # keys=result.keys()
        # keys.sort()
        # for key in keys:
        #     out+="%s.%s %s\n"%(jspid,key,result[key])


        # j.system.statmanager.addInfo(monitorinfo)

    def restartProcess(self, domain,name,**args):
        return self.manager.restartProcess( domain,name)

    def reloadProcess(self, domain, name,**args):
        return self.manager.reloadProcess( domain,name)


    def loop(self):
        """
        loop 10 sec
        """
        while True:
            print "monitor"
            self.monitorProcess()
            gevent.sleep(10)

    def loop120(self):
        """
        loop 120 sec
        """

        while True:
            self.startProcess()
            gevent.sleep(120)

    def loop30(self):
        """
        loop 30 sec
        """

        while True:
            j.system.stataggregator.send2carbon()
            gevent.sleep(30)

    def loopClean(self):
        """
        loop 0.5h 
        """
        while True:            
            gevent.sleep(1800)
            self.aggregator.clean()

    def timer(self):
        """
        loop 0.5 sec
        """

        while True:
            j.system.stataggregator.now=time.time()
            gevent.sleep(0.5)

daemon = j.servers.geventws.getServer(port=4445)

daemon.addCMDsInterface(MgrCmds, category="processmanager")  # pass as class not as object !!! chose category if only 1 then can leave ""

cmds=daemon.daemon.cmdsInterfaces["processmanager"][0]

# daemon.startClock()

daemon.schedule("loop",cmds.loop)
# daemon.schedule("loop120",cmds.loop2) #startupmg
daemon.schedule("loop30",cmds.loop30)
daemon.schedule("loopClean",cmds.loopClean)


# daemon.schedule("timer",cmds.timer)

daemon.start()

j.application.stop()
